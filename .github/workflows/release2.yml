name: Release

env:
  CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

on:
  push:
    tags:
      - 'v*.*.*-test'

jobs:
  build:
    name: Release for UNIX-like OS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            ext: tar.gz
         #- target: x86_64-unknown-linux-musl
         #  os: ubuntu-latest
         #  ext: rpm
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            ext: deb
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            ext: deb
          - target: x86_64-apple-darwin
            os: macOS-latest
            ext: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set envs
        id: vars
        run: |
          echo ver=${GITHUB_REF/refs\/tags\/v/} >> ${GITHUB_OUTPUT}
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

          if [[ "${{ matrix.target}}" == "aarch64-unknown-linux-gnu" ]]; then
            mkdir -p $HOME/.cargo
            echo "[target.aarch64-unknown-linux-gnu]" >> $HOME/.cargo/config
            echo 'linker = "aarch64-linux-gnu-gcc"' >> $HOME/.cargo/config
          fi

      - name: Install prerequisites for musl
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl-tools

      - name: Compile
        if: "! contains(matrix.target, 'musl')"
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --verbose --features oniguruma --release --target ${{ matrix.target }}

      - name: Compile for musl
        if: contains(matrix.target, 'musl')
        run: |
          rustup target add ${{ matrix.target }}
          CFLAGS="-fPIE" CC="musl-gcc -static" cargo build --verbose --features oniguruma --release --target ${{ matrix.target }}

      - name: Packing
        id: pack
        run: |
          mkdir -p package/bin
          mv target/${{ matrix.target }}/release/teip package/bin
          mkdir -p package/man
          cp man/teip.1 package/man
          cp -r completion package/

      - name: Create tarball
        run: |
          _TAR=teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.tar.gz
          tar zcvf "$_TAR" -C "$PWD/package" completion bin man

      - name: Build rpm
        id: rpm
        if: matrix.ext == 'rpm'
        run: |
          _TAR=teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.tar.gz
          docker run -i "greymd/tar2rpm:1.0.1" < "$_TAR" > teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.rpm
          echo sha256=$( sha256sum teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.rpm | awk '{print $1}' ) >> ${GITHUB_OUTPUT}

      - name: Create Debian package
        id: deb
        if: matrix.ext == 'deb'
        run: |
          _TAR=teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.tar.gz
          COPYRIGHT_YEARS="2020 - "$(date "+%Y")
          DPKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/debian-package"
          DPKG_DIR="${DPKG_STAGING}/dpkg"
          mkdir -p "${DPKG_DIR}"

          DPKG_BASENAME=${PROJECT_NAME}
          DPKG_VERSION=${PROJECT_VERSION}

          unset DPKG_ARCH
          case ${{ matrix.target }} in
            aarch64-*-linux-*) DPKG_ARCH=arm64 ;;
            arm-*-linux-*hf) DPKG_ARCH=armhf ;;
            i686-*-linux-*) DPKG_ARCH=i686 ;;
            x86_64-*-linux-*) DPKG_ARCH=amd64 ;;
            *) DPKG_ARCH=notset ;;
          esac;

          DPKG_NAME="teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.deb"
          echo name=${DPKG_NAME} >> ${GITHUB_OUTPUT}
          BIN_PATH=package/bin/teip
          BIN_NAME=${{ env.PROJECT_NAME }}

          # Binary
          install -Dm755 "$BIN_PATH" "${DPKG_DIR}/usr/bin/${BIN_NAME}"

          # Man page
          install -Dm644 package/man/teip.1 "${DPKG_DIR}/usr/share/man/man1/${PROJECT_NAME}.1"
          gzip -n --best "${DPKG_DIR}/usr/share/man/man1/${PROJECT_NAME}.1"

          # Autocompletion files
          install -Dm644 package/completion/zsh/_teip "${DPKG_DIR}/usr/share/zsh/vendor-completions/_${PROJECT_NAME}"

          # README and LICENSE
          install -Dm644 "README.md" "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/README.md"
          install -Dm644 "LICENSE" "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/LICENSE"
          cat > "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/copyright" <<EOF
          Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: ${PROJECT_NAME}
          Source: ${PROJECT_HOMEPAGE}
          Files: *
          Copyright: ${PROJECT_MAINTAINER}
          Copyright: $COPYRIGHT_YEARS ${PROJECT_MAINTAINER}
          License: MIT
            Permission is hereby granted, free of charge, to any
            person obtaining a copy of this software and associated
            documentation files (the "Software"), to deal in the
            Software without restriction, including without
            limitation the rights to use, copy, modify, merge,
            publish, distribute, sublicense, and/or sell copies of
            the Software, and to permit persons to whom the Software
            is furnished to do so, subject to the following
            conditions:
            .
            The above copyright notice and this permission notice
            shall be included in all copies or substantial portions
            of the Software.
            .
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
            ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
            TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
            PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
            SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
            CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
            OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
            IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
            DEALINGS IN THE SOFTWARE.
          EOF

          mkdir -p "${DPKG_DIR}/DEBIAN"
          cat > "${DPKG_DIR}/DEBIAN/control" <<EOF
          Package: ${DPKG_BASENAME}
          Version: ${DPKG_VERSION}
          Section: utils
          Priority: optional
          Maintainer: ${PROJECT_MAINTAINER}
          Homepage: ${PROJECT_HOMEPAGE}
          Architecture: ${DPKG_ARCH}
          Provides: ${PROJECT_NAME}
          Conflicts: ${DPKG_CONFLICTS}
          Description: Masking tape to help commands "do one thing well"
            Bypassing a partial range of standard input to any command
            whatever you want
          EOF
          DPKG_PATH="${DPKG_STAGING}/${DPKG_NAME}"
          fakeroot dpkg-deb --build "${DPKG_DIR}" "${DPKG_PATH}"
          mv "${DPKG_PATH}" "${DPKG_NAME}"
          echo sha256=$( sha256sum "${DPKG_NAME}" | awk '{print $1}' ) >> ${GITHUB_OUTPUT}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.${{ matrix.ext }}
          asset_name: teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.${{ matrix.ext }}
          tag: ${{ github.ref }}
          overwrite: true

      - name: README for rpm
        if: matrix.ext == 'rpm'
        run: |
          _TAR=teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.rpm
          echo "$_TAR" > ./digest.txt
          echo "${{ steps.rpm.outputs.sha256 }}" >> ./digest.txt

      - name: Upload artifact
        if: matrix.ext == 'rpm'
        uses: actions/upload-artifact@v1
        with:
          name: rpm.x86_64
          path: digest.txt

      - name: README for deb
        if: matrix.ext == 'deb'
        run: |
          _TAR=teip-${{ steps.vars.outputs.ver }}.${{ matrix.target }}.deb
          echo "$_TAR" > ./digest.txt
          echo "${{ steps.deb.outputs.sha256 }}" >> ./digest.txt

      - name: Upload artifact
        if: matrix.ext == 'deb'
        uses: actions/upload-artifact@v1
        with:
          name: deb.x86_64
          path: digest.txt

  build-win:
    name: Release for Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: exe
    steps:
      - name: Set envs
        id: vars
        shell: bash
        run: |
          echo ver=${GITHUB_REF/refs\/tags\/v/} >> ${GITHUB_OUTPUT}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build installer for Windows
        id: exe
        shell: pwsh
        run: |
          rustup target add ${{ matrix.target }}
          choco install llvm
          cargo build --features oniguruma --release --verbose --target x86_64-pc-windows-msvc
          # => target\x86_64-pc-windows-msvc\release\teip.exe will be created
          Invoke-WebRequest -OutFile windows\wizard.bmp -Uri https://raw.githubusercontent.com/wiki/greymd/teip/img/wizard.bmp
          Invoke-WebRequest -OutFile windows\wizard_long.bmp -Uri https://raw.githubusercontent.com/wiki/greymd/teip/img/wizard_long.bmp
          md windows\exe
          Move-Item target\x86_64-pc-windows-msvc\release\teip.exe windows\exe
          & "C:\\Program Files\\Git\\usr\\bin\\sed.exe" -i 's/#define MyAppVersion \"0.0.0\"/#define MyAppVersion \"${{ steps.vars.outputs.ver }}\"/' .\windows\installer.iss
          & "${Env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" windows\installer.iss
          Move-Item windows\Output\teip_installer.exe .
          echo "sha256=$(Get-FileHash .\\teip_installer.exe -Algorithm SHA256 | Select-Object -ExpandProperty Hash)" >> ${GITHUB_OUTPUT}
          Rename-Item teip_installer.exe teip_installer-${{ steps.vars.outputs.ver }}-${{ matrix.target }}.${{ matrix.ext }}

      - name: Upload binaries to release for Windows
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: teip_installer-${{ steps.vars.outputs.ver }}-${{ matrix.target }}.${{ matrix.ext }}
          asset_name: teip_installer-${{ steps.vars.outputs.ver }}-${{ matrix.target }}.${{ matrix.ext }}
          tag: ${{ github.ref }}
          overwrite: true

      - name: README for exe
        shell: bash
        run: |
          _BIN=teip_installer-${{ steps.vars.outputs.ver }}-${{ matrix.target }}.${{ matrix.ext }}
          echo "$_BIN" > ./digest.txt
          echo "${{ steps.exe.outputs.sha256 }}" >> ./digest.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ins.x86_64
          path: digest.txt

  readme:
    name: Update README.md
    runs-on: ubuntu-latest
    needs: [build, build-win]
    steps:
      - name: Set envs
        id: vars
        run: |
          echo ver=${GITHUB_REF/refs\/tags\/v/} >> ${GITHUB_OUTPUT}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Apply artifacts rpm
        uses: actions/download-artifact@v1
        with:
          name: rpm.x86_64
      - shell: bash
        run: |
          _shorter=./.github/gitio_shorter.sh
          _ver=${{ steps.vars.outputs.ver }}
          _url="https://github.com/greymd/teip/releases/download/v${_ver}/$(head -n 1 rpm.x86_64/digest.txt)"
          _sha=$(tail -n 1 rpm.x86_64/digest.txt)
          _short_url=$($_shorter "${_url}" "teip-${_ver}.x86_64.rpm" || $_shorter "${_url}" "teip-${_ver}-${_sha:1:5}.x86_64.rpm" || echo "${_url}")
          sed -i "/rpm_x86_64_start/,/rpm_x86_64_end/s|https://.*rpm|$_short_url|g" ./README.md
          sed -i "/rpm_x86_64_sha256/s/SHA256:.*/SHA256: $_sha/" ./README.md
          cat ./README.md

      - name: Apply artifacts deb
        uses: actions/download-artifact@v1
        with:
          name: deb.x86_64
      - shell: bash
        run: |
          _shorter=./.github/gitio_shorter.sh
          _ver=${{ steps.vars.outputs.ver }}
          _url="https://github.com/greymd/teip/releases/download/v${_ver}/$(head -n 1 deb.x86_64/digest.txt)"
          _sha=$(tail -n 1 deb.x86_64/digest.txt)
          _short_url=$($_shorter "${_url}" "teip-${_ver}.x86_64.deb" || $_shorter "${_url}" "teip-${_ver}-${_sha:1:5}.x86_64.deb" || echo "${_url}")
          sed -i "/deb_x86_64_start/,/deb_x86_64_end/s|https://.*deb|$_short_url|g" ./README.md
          sed -i "/deb_x86_64_sha256/s/SHA256:.*/SHA256: $_sha/" ./README.md
          cat ./README.md

      - name: Apply artifacts ins
        uses: actions/download-artifact@v1
        with:
          name: ins.x86_64
      - shell: bash
        run: |
          _shorter=./.github/gitio_shorter.sh
          _ver=${{ steps.vars.outputs.ver }}
          _url="https://github.com/greymd/teip/releases/download/v${_ver}/$(head -n 1 ins.x86_64/digest.txt)"
          _sha=$(tail -n 1 ins.x86_64/digest.txt)
          _short_url=$($_shorter "${_url}" "teip_installer-${_ver}.x86_64.exe" || $_shorter "${_url}" "teip_installer-${_ver}-${_sha:1:5}.x86_64.exe" || echo "${_url}")
          sed -i "/ins.x86_64_start/,/ins.x86_64_end/s|https://.*exe|$_short_url|g" ./README.md
          sed -i "/ins.x86_64_sha256/s/SHA256:.*/SHA256: $_sha/" ./README.md
          cat ./README.md

      - name: Release README
        if: "! contains (steps.vars.outputs.ver, 'beta')"
        uses: EndBug/add-and-commit@v4
        with:
          add: README.md
          author_name: GitHub Action
          author_email: yamada@gr3.ie
          message: '[skip ci] Update README.md'
          ref: 'main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
