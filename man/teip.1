.TH TEIP 1 "JAN 2024" "User Commands" ""
.SH NAME
.PP
teip \- Masking tape to help commands "do one thing well"
.SH SYNOPSIS
.PP
\fB\fCteip\fR \-g <\fIpattern\fP> [\-oGsvz] [\-\-] [<\fIcommand\fP>...]
.PP
\fB\fCteip\fR \-f <\fIlist\fP> [\-d <\fIdelimiter\fP> | \-D <\fIpattern\fP> | \-\-csv] [\-svz] [\-\-] [<\fIcommand\fP>...]
.PP
\fB\fCteip\fR \-c <\fIlist\fP> [\-svz] [\-\-] [<\fIcommand\fP>...]
.PP
\fB\fCteip\fR \-l <\fIlist\fP> [\-svz] [\-\-] [<\fIcommand\fP>...]
.PP
\fB\fCteip\fR \-e <\fIstring\fP> [\-svz] [\-\-] [<\fIcommand\fP>...]
.PP
\fB\fCteip\fR \-\-help | \-\-version
.SH DESCRIPTION
.PP
Passing a partial range of the standard input to any command â€” whatever you want
.SH OPTIONS
.TP
\fB\fC\-\-help\fR
Prints help information
.TP
\fB\fC\-V\fR, \fB\fC\-\-version\fR
Prints version information
.TP
\fB\fC\-g\fR <\fIpattern\fP>
Act on lines that match the regular expression <\fIpattern\fP>
.TP
\fB\fC\-o\fR
\-g acts on only matched parts
.TP
\fB\fC\-G\fR
\-g interprets Oniguruma regular expressions
.TP
\fB\fC\-f\fR <\fIlist\fP>
Act on these white\-space separated fields
.TP
\fB\fC\-d\fR <\fIdelimiter\fP>
Use <\fIdelimiter\fP> for the field delimiter of \-f
.TP
\fB\fC\-D\fR <\fIpattern\fP>
Use regular expression <\fIpattern\fP> for the field delimiter of \-f
.TP
\fB\fC\-c\fR <\fIlist\fP>
Act on these characters
.TP
\fB\fC\-e\fR <\fIstring\fP>
Execute <\fIstring\fP> on another process that will receive identical standard input as the main teip command, emitting numbers to be used as line numbers for actioning.
.TP
\fB\fC\-l\fR <\fIlist\fP>
Act on these lines
.TP
\fB\fC\-\-csv\fR
\-f interprets <\fIlist\fP> as field numbers of a CSV according to RFC 4180, instead of whitespace separated fields
.TP
\fB\fC\-s\fR
Execute a new command for each actioned chunk
.TP
\fB\fC\-I\fR
Replace the <\fIreplace\-str\fP> with the actioned chunk in <\fIcommand\fP>, implying \-s
.TP
\fB\fC\-\-chomp\fR
The command spawned by \-s receives the standard input without trailing newlines
.TP
\fB\fC\-v\fR
Invert the range of actioning
.TP
\fB\fC\-z\fR
Line delimiter is NUL instead of a newline
.TP
\-A <\fInumber\fP>
Use  together with \fB\fC\-g <pattern>\fR\&.
Alias of \fB\fC\-e 'grep \-n \-A <number> <pattern>'\fR
.TP
\-B <\fInumber\fP>
Use together with \fB\fC\-g <pattern>\fR\&.
Alias of \fB\fC\-e 'grep \-n \-B <number> <pattern>'\fR
.TP
\-C <\fInumber\fP>
Use  together with \fB\fC\-g <pattern>\fR\&.
Alias of \fB\fC\-e 'grep \-n \-C <number> <pattern>'\fR
.TP
\-\-sed <\fIpattern\fP>
Alias of \fB\fC\-e 'sed \-n "<pattern>="'\fR
See also 
.BR sed (1)
.TP
\-\-awk <\fIpattern\fP>
Alias of \fB\fC\-e 'awk "<pattern>{print NR}"'\fR
See also 
.BR awk (1)
.SS \fIcommand\fP
.PP
\fIcommand\fP refers to the command and its arguments that \fB\fCteip\fR executes.
Each \fIcommand\fP should output a single line of result for each line of input.
In the simplest example, the \fB\fCcat(1)\fR command is always successful,
as \fB\fCcat\fR outputs the same number of lines as its input.
.PP
.RS
.nf
$ echo ABCDEF | teip \-og . \-\- cat
ABCDEF
.fi
.RE
.PP
The \fB\fCsed(1)\fR command works well with typical patterns.
.PP
.RS
.nf
$ echo ABCDEF | teip \-og . \-\- sed 's/[ADF]/@/'
@BC@E@
.fi
.RE
.PP
If the rule is not adhered to, the result may be inconsistent.
For example, \fB\fCgrep(1)\fR might fail, as shown here.
.PP
.RS
.nf
$ echo ABCDEF | teip \-og . \-\- grep '[ABC]'
ABC
teip: Output of given command is exhausted
.fi
.RE
.PP
In this case, \fB\fCteip\fR could not retrieve results corresponding to D, E, and F, leading to the failure of the example.
If such inconsistency occurs, \fB\fCteip\fR will terminate with an error message, and the exit status will be set to 1.
.PP
.RS
.nf
$ echo $?
1
.fi
.RE
.PP
If no \fIcommand\fP is specified, \fB\fCteip\fR displays how the standard input will be divided into chunks.
.PP
.RS
.nf
$ echo ABCDEF | teip \-og .
[A][B][C][D][E][F]
.fi
.RE
.SS \fIlist\fP
.PP
\fIlist\fP is a specification used to define the range of fields or characters.
This notation is compatible with that used in \fB\fCcut(1)\fR\&. For detailed information, please refer to the \fB\fCcut(1)\fR manual.
Here are some examples:
.PP
Select the 1st, 3rd, and 5th fields.
.PP
.RS
.nf
$ echo 1 2 3 4 5 | teip \-f 1,3,5 \-\- sed 's/./@/'
@ 2 @ 4 @
.fi
.RE
.PP
Select fields from the 2nd to the 4th.
.PP
.RS
.nf
$ echo 1 2 3 4 5 | teip \-f 2\-4 \-\- sed 's/./@/'
1 @ @ @ 5
.fi
.RE
.PP
Select all fields starting from the 3rd.
.PP
.RS
.nf
$ echo 1 2 3 4 5 | teip \-f 3\- \-\- sed 's/./@/'
1 2 @ @ @
.fi
.RE
.PP
Select all fields up to the 4th.
.PP
.RS
.nf
$ echo 1 2 3 4 5 | teip \-f \-4 \-\- sed 's/./@/'
@ @ @ @ 5
.fi
.RE
.SS \fIpattern\fP
.PP
\fIpattern\fP is a regular expression based on the "regex crate" syntax.
For more details, refer to the link in the \fISEE ALSO\fP section.
.SS The Necessity of \fB\-\-\fP
.PP
\fB\fCteip\fR interprets arguments after \fB\fC\-\-\fR as a \fIcommand\fP and its arguments.
.PP
Omitting \fB\-\-\fP causes failure in this example:
.PP
.RS
.nf
$ echo "100 200 300 400" | teip \-f 3 cut \-c 1
teip: Invalid arguments.
.fi
.RE
.PP
This error occurs because \fB\fCcut\fR uses the \fB\fC\-c\fR option, which is also a \fB\fCteip\fR option, leading to confusion.
.PP
However, with the use of \fB\-\-\fP, the command executes successfully:
.PP
.RS
.nf
$ echo "100 200 300 400" | teip \-f 3 \-\- cut \-c 1
100 200 3 400
.fi
.RE
.SS External Execution for Match Offloading (\fB\fC\-e\fR)
.PP
With \fB\fC\-e\fR, you can use external commands to specify the range of holes. \fB\fC\-e\fR allows you to specify a shell pipeline as a string, which is executed in \fB\fC/bin/sh\fR\&.
.PP
For instance, using a pipeline like \fB\fCecho 3\fR, which outputs \fB\fC3\fR, only the third line will be selected.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC' | teip \-e 'echo 3'
AAA
BBB
[CCC]
.fi
.RE
.PP
It also works even if the output includes extraneous characters. For example, spaces or tab characters at the start of a line are ignored. Additionally, once a number is provided, non\-numerical characters to the right of the number are disregarded.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC' | teip \-e 'echo " 3"'
AAA
BBB
[CCC]
$ echo \-e 'AAA\\nBBB\\nCCC' | teip \-e 'echo " 3:testtest"'
AAA
BBB
[CCC]
.fi
.RE
.PP
Technically, the first captured group in the regular expression \fB\fC^\\s*([0\-9]+)\fR is interpreted as a line number. \fB\fC\-e\fR will also recognize multiple numbers if provided across multiple lines.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | teip \-e 'seq 1 2 10' \-\- sed 's/. /@/g'
@@@
BBB
@@@
DDD
@@@
FFF
.fi
.RE
.PP
Note that the numbers must be in ascending order.
.PP
The pipeline receives the same standard input as \fB\fCteip\fR\&. Here's a command using \fB\fCgrep\fR to print line numbers of a line containing "CCC" and the two following lines.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | grep \-n \-A 2 CCC
3:CCC
4\-DDD
5\-EEE
.fi
.RE
.PP
Using this with \fB\fC\-e\fR punches holes in the line containing "CCC" and the two subsequent lines.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | teip \-e 'grep \-n \-A 2 CCC'
AAA
BBB
[CCC]
[DDD]
[EEE]
FFF
.fi
.RE
.PP
GNU \fB\fCsed\fR has an \fB\fC=\fR option, which prints the line number being processed. Below is an example to drill holes from the line containing "BBB" to "EEE".
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | teip \-e 'sed \-n "/BBB/,/EEE/="'
AAA
[BBB]
[CCC]
[DDD]
[EEE]
FFF
.fi
.RE
.PP
Similarly, you can perform these operations with \fB\fCawk\fR\&.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | teip \-e 'awk "/BBB/,/EEE/{print NR}"'
.fi
.RE
.PP
Here's an example using \fB\fCnl\fR and \fB\fCtail\fR to make holes in the last three lines of input.
.PP
.RS
.nf
$ echo \-e 'AAA\\nBBB\\nCCC\\nDDD\\nEEE\\nFFF' | teip \-e 'nl \-ba | tail \-n 3'
AAA
BBB
CCC
[DDD]
[EEE]
[FFF]
.fi
.RE
.PP
The \fB\fC\-e\fR argument is a single string, so pipes \fB\fC|\fR and other symbols can be used as is.
.SH EXAMPLES
.PP
Replace 'WORLD' with 'EARTH' on lines containing 'HELLO'
.PP
.RS
.nf
$ cat file | teip \-g HELLO \-\- sed 's/WORLD/EARTH/'
.fi
.RE
.PP
Edit the 2nd field of a CSV file
.PP
.RS
.nf
$ cat file.csv | teip \-\-csv \-f 2 \-\- tr a\-z A\-Z
.fi
.RE
.PP
Edit the 2nd, 3rd, and 4th fields of a TSV file
.PP
.RS
.nf
$ cat file.tsv | teip \-D '\\t' \-f 2\-4 \-\- tr a\-z A\-Z
.fi
.RE
.PP
Convert timestamps in /var/log/secure to UNIX time
.PP
.RS
.nf
$ cat /var/log/secure | teip \-c 1\-15 \-\- date \-f\- +%s
.fi
.RE
.PP
Edit lines containing 'hello' and the three lines before and after it
.PP
.RS
.nf
$ cat access.log | teip \-e 'grep \-n \-C 3 hello' \-\- sed 's/./@/g'
.fi
.RE
.SH SEE ALSO
.SS Manual pages
.PP
.BR cut (1), 
.BR sed (1), 
.BR awk (1), 
.BR grep (1)
.SS Full documentation
.PP
\[la]https://github.com/greymd/teip\[ra]
.SS Regular expression
.PP
\[la]https://docs.rs/regex/\[ra]
.SS Regular expression (Oniguruma)
.PP
\[la]https://github.com/kkos/oniguruma/blob/master/doc/RE\[ra]
.SS RFC 4180: Common Format and MIME Type for Comma\-Separated Values (CSV) Files
.PP
\[la]https://www.rfc-editor.org/rfc/rfc4180\[ra]
.SH AUTHOR AND COPYRIGHT
.PP
Copyright (c) 2023 Yamada, Yasuhiro \[la]yamada@gr3.ie\[ra] Released under the MIT License.
